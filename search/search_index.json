{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Strawberry Graphql Auth","text":"<p> JWT Authentication / Authorization system for strawberry-django.</p> <p> </p>"},{"location":"#demo","title":"Demo","text":""},{"location":"#about","title":"About","text":"<p>Abstract all the basic logic of handling user accounts out of your app, so you don't need to think about it and can get you up and running faster.</p> <p>No lock-in. When you are ready to implement your own code or this package is not up to your expectations , it's easy to extend or switch to your implementation.</p>"},{"location":"#goals","title":"Goals","text":"<ul> <li>Easy JWT authentication compatible with strawberry.</li> <li>Some boiler-plate mutations like register, login etc.</li> </ul>"},{"location":"#non-goals","title":"Non-goals","text":"<ul> <li>Permission handling - out of scope for this project, we just provide you a user in <code>info.context.request</code>.</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> Awesome docs!</li> <li> Captcha validation</li> <li> Async/Sync supported!</li> <li> django-channels asgi support.</li> <li> Works with default or custom user model</li> <li> Built-in JWT authentication.</li> <li> User registration with email verification</li> <li> Add secondary email, with email verification too</li> <li> Resend activation email</li> <li> Retrieve/Update user</li> <li> Archive user</li> <li> Permanently delete user or make it inactive</li> <li> Turn archived user active again on login</li> <li> Track user status (archived, verified, secondary email)</li> <li> Password change</li> <li> Password reset through email</li> <li> Revoke user tokens on account archive/delete/password change/reset</li> <li> All mutations return <code>success</code> and <code>errors</code></li> <li> Default email templates (you will customize though)</li> <li> Customizable, no lock-in</li> <li> Passwordless registration</li> </ul> <p>You can now jump to the Tutorial.</p>"},{"location":"api/","title":"API","text":"<p>auto generated using <code>pydoc_markdown</code></p>"},{"location":"api/#registermixin","title":"RegisterMixin","text":"<pre><code>class RegisterMixin(BaseMixin)\n</code></pre> <p>Register user with fields defined in the settings. If the email field of the user model is part of the registration fields (default), check if there is no user with that email.</p> <p>If it exists, it does not register the user, even if the email field is not defined as unique (default of the default django user model).</p> <p>When creating the user, it also creates a <code>UserStatus</code> related to that user, making it possible to track if the user is archived / verified.</p> <p>Send account verification email.</p> <p>If allowed to not verified users login, return token.</p>"},{"location":"api/#verifyaccountmixin","title":"VerifyAccountMixin","text":"<pre><code>class VerifyAccountMixin(BaseMixin)\n</code></pre> <p>Verify user account.</p> <p>Receive the token that was sent by email. If the token is valid, make the user verified by making the <code>user.status.verified</code> field true.</p>"},{"location":"api/#resendactivationemailmixin","title":"ResendActivationEmailMixin","text":"<pre><code>class ResendActivationEmailMixin(BaseMixin)\n</code></pre> <p>Sends activation email.</p> <p>It is called resend because theoretically the first activation email was sent when the user registered.</p> <p>If there is no user with the requested email, a successful response is returned.</p>"},{"location":"api/#sendpasswordresetemailmixin","title":"SendPasswordResetEmailMixin","text":"<pre><code>class SendPasswordResetEmailMixin(BaseMixin)\n</code></pre> <p>Send password reset email.</p> <p>For non verified users, send an activation email instead.</p> <p>If there is no user with the requested email, a successful response is returned.</p>"},{"location":"api/#passwordresetmixin","title":"PasswordResetMixin","text":"<pre><code>class PasswordResetMixin(BaseMixin)\n</code></pre> <p>Change user password without old password.</p> <p>Receive the token that was sent by email.</p> <p>If token and new passwords are valid, update user password and in case of using refresh tokens, revoke all of them.</p> <p>Also, if user has not been verified yet, verify it.</p>"},{"location":"api/#passwordsetmixin","title":"PasswordSetMixin","text":"<pre><code>class PasswordSetMixin(BaseMixin)\n</code></pre> <p>Set user password - for password-less registration</p> <p>Receive the token that was sent by email.</p> <p>If token and new passwords are valid, set user password and in case of using refresh tokens, revoke all of them.</p> <p>Also, if user has not been verified yet, verify it.</p>"},{"location":"api/#obtainjsonwebtokenmixin","title":"ObtainJSONWebTokenMixin","text":"<pre><code>class ObtainJSONWebTokenMixin(BaseMixin)\n</code></pre> <p>Obtain JSON web token for given user.</p> <p>Allow to perform login with different fields, The fields are defined on settings.</p> <p>Not verified users can log in by default. This can be changes on settings.</p> <p>If user is archived, make it unarchived and return <code>unarchiving=True</code> on OutputBase.</p>"},{"location":"api/#archiveaccountmixin","title":"ArchiveAccountMixin","text":"<pre><code>class ArchiveAccountMixin(ArchiveOrDeleteMixin)\n</code></pre> <p>Archive account and revoke refresh tokens.</p> <p>User must be verified and confirm password.</p>"},{"location":"api/#deleteaccountmixin","title":"DeleteAccountMixin","text":"<pre><code>class DeleteAccountMixin(ArchiveOrDeleteMixin)\n</code></pre> <p>Delete account permanently or make <code>user.is_active=False</code>.</p> <p>The behavior is defined on settings. Anyway user refresh tokens are revoked.</p> <p>User must be verified and confirm password.</p>"},{"location":"api/#passwordchangemixin","title":"PasswordChangeMixin","text":"<pre><code>class PasswordChangeMixin(BaseMixin)\n</code></pre> <p>Change account password when user knows the old password.</p> <p>A new token and refresh token are sent. User must be verified.</p>"},{"location":"api/#updateaccountmixin","title":"UpdateAccountMixin","text":"<pre><code>class UpdateAccountMixin(BaseMixin)\n</code></pre> <p>Update user model fields, defined on settings.</p> <p>User must be verified.</p>"},{"location":"api/#verifytokenmixin","title":"VerifyTokenMixin","text":"<pre><code>class VerifyTokenMixin(BaseMixin)\n</code></pre>"},{"location":"api/#checks-if-a-token-is-not-expired-and-correct","title":"Checks if a token is not expired and correct.","text":"<p>Note that this is not for refresh tokens.</p>"},{"location":"api/#refreshtokenmixin","title":"RefreshTokenMixin","text":"<pre><code>class RefreshTokenMixin(BaseMixin)\n</code></pre>"},{"location":"api/#refreshtoken-to-generate-a-new-login-token","title":"refreshToken to generate a new login token:","text":"<p>Use this only if <code>JWT_LONG_RUNNING_REFRESH_TOKEN</code> is True</p> <p>using the refresh-token you already got during authorization, and obtain a brand-new token (and possibly a new refresh token if you revoked the previous). This is an alternative to log in when your token expired.</p>"},{"location":"api/#revoketokenmixin","title":"RevokeTokenMixin","text":"<pre><code>class RevokeTokenMixin(BaseMixin)\n</code></pre>"},{"location":"api/#suspends-a-refresh-token","title":"Suspends a refresh token.","text":"<p>token must exist to be revoked.</p>"},{"location":"captcha/","title":"Captcha","text":"<p>this package provides a fully functional captcha validation system the default setting are:</p> <p><pre><code>    LOGIN_REQUIRE_CAPTCHA = True,\n    REGISTER_REQUIRE_CAPTCHA = True,\n</code></pre> if you don't like this set them to False.</p> <p>The Captcha is available to query via a base64 encoded string or via a static .png image.</p> <p>Note: The Image is in PNG format</p> base64static <pre><code>mutation MyMutation {\n  captcha {\n    uuid\n    pilImage\n  }\n}\n</code></pre> <p>You will further be needed to implement a translation in the UI.</p> <p>For the creation of a static set <code>CAPTCHA_SAVE_IMAGE = True</code> on your settings. This will use django's Imagefield to store the captcha image. You will also be needed to include a path in your urlpatterns for development, as per the documentation.</p> <pre><code>mutation MyMutation {\n  captcha {\n    uuid\n    image{\n      width\n      height\n      url\n\n    }\n  }\n}\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>Release type: patch</p> <p>Release for #586</p>"},{"location":"channels/","title":"Channels","text":"<p>In order to have a user in your context from headers our django middleware would not suffice. you would need to user our <code>channels</code> middleware.</p> <p>Here is an example of an asgi.py file that uses our middleware to support JWT from headers: asgi.py</p> <pre><code>from gqlauth.core.middlewares import channels_jwt_middleware\n\n...\n\nwebsocket_urlpatterns = [\n    re_path(\"^graphql\", channels_jwt_middleware(GraphQLWSConsumer.as_asgi(schema=arg_schema))),\n]\ngql_http_consumer = AuthMiddlewareStack(\n    channels_jwt_middleware(GraphQLHTTPConsumer.as_asgi(schema=arg_schema))\n)\napplication = ProtocolTypeRouter(\n    {\n        \"http\": URLRouter(\n            [\n                re_path(\"^graphql\", gql_http_consumer),\n            ]\n        ),\n        \"websocket\": AuthMiddlewareStack(URLRouter(websocket_urlpatterns)),\n    }\n)\n</code></pre> <p>Now in order to have the user inside <code>info.context.request</code> we need to use a custom schema schema.py <pre><code>from gqlauth.core.middlewares import JwtSchema\n\n\narg_schema = JwtSchema(\n    query=Query, mutation=Mutation, subscription=Subscription\n)\n</code></pre></p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Thanks for helping improve Django GraphQL Auth!</p> <p>All kinds of contributions are welcome:</p> <ul> <li>Bug fixes</li> <li>Documentation improvements</li> <li>New features</li> <li>Refactoring</li> <li>Fix some typo</li> <li>Write more tests</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting started","text":"<p>If you have a specific contribution in mind, be sure to check the issues and projects in progress - someone could already be working on something similar and you can help out.</p>"},{"location":"contributing/#project-setup","title":"Project setup","text":"<p>After cloning this repo, ensure dependencies are installed by running:</p> <pre><code>make dev-setup\n</code></pre> <p>and</p> <pre><code>pip install tox\n</code></pre>"},{"location":"contributing/#running-tests","title":"Running tests","text":"<p>After developing, you can run tests with:</p> <pre><code># python=3.7 and django=3.0\nmake test\n</code></pre> <p>You can specify versions, for the full list see the <code>tox.ini</code> file.</p> <pre><code># python=3.6 and django=2.2\nmake test p=36 d=22\n</code></pre> <p>Test directly with tox:</p> <pre><code>tox\n</code></pre> <p>Single file test shortcut:</p> <pre><code># run only tests in tests/test_register.py\nmake test-file f=register\n</code></pre> <p>For live testing on a django project, you can use the testproject.  Create a different virtualenv, install the dependencies again and run:</p> <pre><code>cd testproject\nmake install-local v=&lt;CURRENT VERSION IN gqlauth.__init__&gt;\n</code></pre>"},{"location":"contributing/#opening-pull-requests","title":"Opening Pull Requests","text":"<p>Please fork the project and open a pull request against the main branch.</p> <p>This will trigger a series of tests and lint checks.</p> <p>We advise that you format and run lint locally before doing this to save time:</p> <pre><code>make format\nmake lint\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The documentation is generated using the excellent MkDocs with material theme.</p> <p>The documentation dependencies are installed by running:</p> <pre><code>pip install -r docs/requirements.txt\n</code></pre> <p>Then to produce a HTML version of the documentation, for live editing:</p> <pre><code>make serve\n</code></pre> <p>It will run the <code>docs/pre_build.py</code> script before building the docs.</p>"},{"location":"contributors/","title":"Contributors","text":"<ul> <li>@pedrobern</li> <li>@nrbnlulu</li> <li>@yanivtoledano</li> <li>@ulgens</li> <li>@panosangelopoulos</li> <li>@pors</li> <li>@bzhr</li> <li>@maxpeterson</li> <li>@boolangery </li> <li>@capaci</li> <li>@mnieber</li> <li>@joshuachinemezu</li> <li>@imsheldon</li> </ul>"},{"location":"overriding-email-templates/","title":"Overriding Email Templates","text":"<p>The default email templates are just examples, you probably want to customize it.</p>"},{"location":"overriding-email-templates/#update-your-settings","title":"Update your settings:","text":"<pre><code># settings.py\nimport os\nTEMPLATES = [\n    {\n        #...\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        # ...\n    },\n]\n</code></pre>"},{"location":"overriding-email-templates/#file-and-folder-sctructure","title":"File and folder sctructure","text":"<p>Create the following folder and files structure:</p> <pre><code>- project_name/\n    - project_name/\n    - templates/\n        email/\n          activation_email.html\n          activation_subject.txt\n          password_reset_email.html\n          password_reset_subject.txt\n      db.sqlite3\n      manage.py\n</code></pre> <p>This is the minimum. Check the email templates settings, you can create custom templates for:</p> <ul> <li>account activation</li> <li>resend account activation email</li> <li>password reset email</li> </ul>"},{"location":"overriding-email-templates/#email-variables","title":"Email variables","text":"<p>Both subject and email templates receive the following variables:</p> <ul> <li>user</li> <li>token \u2192 account activation / password reset</li> <li>port</li> <li>site_name \u2192 from django sites framework (optional)</li> <li>domain \u2192 from django sites framework (optional)</li> <li>protocol</li> <li>path \u2192 defined in settings (some frontend path)</li> <li>request</li> <li>timestamp</li> <li>custom variables defined using EMAIL_TEMPLATE_VARIABLES setting \u2192 defined in settings</li> </ul>"},{"location":"overriding-email-templates/#writing-the-templates","title":"Writing the templates","text":"<p>Write your templates like this:</p> <pre><code>&lt;!-- activation_email.html --&gt;\n\n&lt;h3&gt;{{ site_name }}&lt;/h3&gt;\n\n&lt;p&gt;Hello \\{{ user.username }}!&lt;/p&gt;\n\n&lt;p&gt;Please activate your account on the link:&lt;/p&gt;\n\n&lt;p&gt;{{ protocol }}://{{ domain }}/{{ path }}/{{ token }}&lt;/p&gt;\n</code></pre> <p>Provide only the <code>html</code> template. It will be converted to <code>text</code> later.</p>"},{"location":"relay/","title":"Relay","text":"<p>Import mutations from the <code>relay</code> module:</p> <pre><code>import strawberry\nfrom gqlauth.user import relay\n\n@strawberry.type\nclass AuthMutation:\n   register = relay.Register.field\n</code></pre>"},{"location":"relay/#note-that-relay-is-not-supported-for-queries-yet","title":"Note that relay is not supported for queries yet.","text":""},{"location":"settings/","title":"Settings","text":"<p>auto generated using <code>pydoc_markdown</code></p>"},{"location":"settings/#gqlauthsettings","title":"GqlAuthSettings","text":"<pre><code>@dataclass\nclass GqlAuthSettings()\n</code></pre>"},{"location":"settings/#allow_login_not_verified","title":"ALLOW_LOGIN_NOT_VERIFIED","text":""},{"location":"settings/#login_fields","title":"LOGIN_FIELDS","text":"<p>These fields would be used to authenticate with SD-jwt <code>authenticate</code> function. This function will call each of our <code>AUTHENTICATION_BACKENDS</code>, And will return the user from one of them unless <code>PermissionDenied</code> was raised. You can pass any fields that would be accepted by your backends.</p> <p>Note that <code>password field</code> is mandatory and cannot be removed.</p>"},{"location":"settings/#login_require_captcha","title":"LOGIN_REQUIRE_CAPTCHA","text":"<p>Whether login will require captcha verification.</p>"},{"location":"settings/#ci_mode","title":"CI_MODE","text":"<p>Whether to enable CI mode, this will disable captcha validation (although the fields would still be required).</p>"},{"location":"settings/#register_mutation_fields","title":"REGISTER_MUTATION_FIELDS","text":"<p>Fields on register, plus password1 and password2, can be a dict like UPDATE_MUTATION_fieldS setting.</p>"},{"location":"settings/#register_require_captcha","title":"REGISTER_REQUIRE_CAPTCHA","text":"<p>Whether register will require captcha verification.</p>"},{"location":"settings/#captcha_expiration_delta","title":"CAPTCHA_EXPIRATION_DELTA","text":"<p>captcha stuff captcha expiration delta.</p>"},{"location":"settings/#captcha_max_retries","title":"CAPTCHA_MAX_RETRIES","text":"<p>max number of attempts for one captcha.</p>"},{"location":"settings/#captcha_text_factory","title":"CAPTCHA_TEXT_FACTORY","text":"<p>A callable with no arguments that returns a string.</p> <p>This will be used to generate the captcha image.</p>"},{"location":"settings/#captcha_text_validator","title":"CAPTCHA_TEXT_VALIDATOR","text":"<p>A callable that will receive the original string vs user input and returns a boolean.</p>"},{"location":"settings/#force_show_captcha","title":"FORCE_SHOW_CAPTCHA","text":"<p>Whether to show the captcha image after it has been created for debugging purposes.</p>"},{"location":"settings/#captcha_save_image","title":"CAPTCHA_SAVE_IMAGE","text":"<p>If True, an png representation of the captcha will be saved under MEDIA_ROOT/captcha//.png."},{"location":"settings/#update_mutation_fields","title":"UPDATE_MUTATION_FIELDS","text":"<p>Fields on update account mutation.</p>"},{"location":"settings/#allow_delete_account","title":"ALLOW_DELETE_ACCOUNT","text":"<p>If True, DeleteAcount mutation will permanently delete the user.</p>"},{"location":"settings/#allow_passwordless_registration","title":"ALLOW_PASSWORDLESS_REGISTRATION","text":"<p>Whether to allow registration with no password.</p>"},{"location":"settings/#jwt_secret_key","title":"JWT_SECRET_KEY","text":"<p>Key used to sign the JWT token.</p>"},{"location":"settings/#jwt_algorithm","title":"JWT_ALGORITHM","text":"<p>Algorithm used for signing the token.</p>"},{"location":"settings/#jwt_time_format","title":"JWT_TIME_FORMAT","text":"<p>A valid 'strftime' string that will be used to encode the token payload.</p>"},{"location":"settings/#jwt_payload_handler","title":"JWT_PAYLOAD_HANDLER","text":"<p>A custom function to generate the token datatype, its up to you to encode the token.</p>"},{"location":"settings/#jwt_payload_pk","title":"JWT_PAYLOAD_PK","text":"<p>Field that will be used to generate the token from a user instance and retrieve user based on the decoded token. The default value is the username field of the User model. If you want to change it to id, for example, you can use the id_field defined in gqlauth.settings_type and change it like JWT_PAYLOAD_PK=id_field.</p> <p>This filed must be unique in the database</p>"},{"location":"settings/#jwt_token_finder","title":"JWT_TOKEN_FINDER","text":"<p>A hook called by <code>GqlAuthRootField</code> to find the token. Accepts the request object (might be channels scope dict or django request object)</p> <p>remember to strip the \"JWT \" prefix if you override this.</p>"},{"location":"settings/#jwt_expiration_delta","title":"JWT_EXPIRATION_DELTA","text":"<p>Timedelta added to <code>utcnow()</code> to set the expiration time.</p> <p>When this ends you will have to create a new token by logging in or using the refresh token.</p>"},{"location":"settings/#jwt_long_running_refresh_token","title":"JWT_LONG_RUNNING_REFRESH_TOKEN","text":"<p>Whether to enable refresh tokens to be used as an alternative to login every time the token is expired.</p>"},{"location":"settings/#jwt_refresh_token_n_bytes","title":"JWT_REFRESH_TOKEN_N_BYTES","text":"<p>Number of bytes for long running refresh token.</p>"},{"location":"settings/#jwt_refresh_expiration_delta","title":"JWT_REFRESH_EXPIRATION_DELTA","text":"<p>Refresh token expiration time delta.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#what-to-expect","title":"What to expect","text":"<ul> <li>Fully functional API to handle user account</li> <li>Setup with custom user model</li> <li>20 to 30 minutes</li> </ul> <p>Final code on github.</p>"},{"location":"tutorial/#requirements","title":"Requirements","text":"<ul> <li>Python: &gt;= 3.8</li> <li>Django: &gt;= 3.2</li> <li>Basic knowledge in Strawberry</li> </ul>"},{"location":"tutorial/#start-a-new-django-project","title":"Start a new Django Project","text":"<p>It's recommended to use virtual env wrapper or virtualenv to create your project inside an isolated python environment. We will use the first.</p>"},{"location":"tutorial/#create-the-virtual-env","title":"Create the virtual env","text":"<pre><code>mkdir strawberry-django-auth-tutorial\ncd strawberry-django-auth-tutorial\npython -m venv venv\nsource venv/bin/activate\n</code></pre>"},{"location":"tutorial/#create-the-django-project","title":"Create the Django Project","text":"<p>First install django:</p> <pre><code>python -m pip install django\n</code></pre> <p>Then, create the new project. Take note of the \".\" at the end of the command, it will create the project in the current directory.:</p> <pre><code>django-admin startproject quickstart .\n</code></pre>"},{"location":"tutorial/#create-the-custom-user-model","title":"Create the custom user model","text":"<p>Changing to a custom user model mid-project is significantly more difficult. So let's start by adding it now. Run the following:</p> <pre><code>python manage.py startapp users\n</code></pre> <p>Then, create the custom user model:</p> <pre><code># users/models.py\n\nfrom django.contrib.auth.models import AbstractUser\n\nclass CustomUser(AbstractUser):\n\n    email = models.EmailField(blank=False, max_length=254, verbose_name=\"email address\")\n\n    USERNAME_FIELD = \"username\"   # e.g: \"username\", \"email\"\n    EMAIL_FIELD = \"email\"         # e.g: \"email\", \"primary_email\"\n</code></pre> <p>Add it to the settings:</p> <pre><code># quickstart/settings.py\n\nINSTALLED_APPS = [\n    # ...\n    'users'\n]\n\nAUTH_USER_MODEL = 'users.CustomUser'\n</code></pre> <p>Finally, migrate:</p> <pre><code>python manage.py makemigrations\npython manage.py migrate\n</code></pre> <p>You can customize the mutations to match your custom user model fields, see the dynamic-fields settings.</p>"},{"location":"tutorial/#install-strawberry-django-auth","title":"Install strawberry-django-auth","text":"<pre><code>pip install strawberry-django-auth\n</code></pre> <pre><code># quickstart/settings.py\nfrom gqlauth.settings_type import GqlAuthSettings\n\nINSTALLED_APPS = [\n    # ...\n    'django.contrib.staticfiles',  # Required for GraphiQL\n    \"strawberry_django\",\n    \"gqlauth\",\n\n]\n\nMIDDLEWARE = [\n    # ...\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'gqlauth.core.middlewares.django_jwt_middleware'\n    # ...\n]\n\nAUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n]\n</code></pre> <p>We will disable captcha validation for now, just for ease of setup.</p> <pre><code># quickstart/settings.py\nfrom gqlauth.settings_type import GqlAuthSettings\n\nGQL_AUTH = GqlAuthSettings(\n    LOGIN_REQUIRE_CAPTCHA=False,\n    REGISTER_REQUIRE_CAPTCHA=False,\n)\n</code></pre> <p>And make sure your templates configuration has the following:</p> <pre><code>TEMPLATES = [\n    {\n        # ...\n        'APP_DIRS': True,\n    },\n]\n</code></pre> <p>Run:</p> <pre><code>python -m manage migrate\n</code></pre>"},{"location":"tutorial/#create-the-schema","title":"Create the schema","text":"<p>Create a file called <code>schema.py</code> next to your <code>models.py</code></p> <p>Add the following to code:</p> <pre><code># users/schema.py\n\nimport strawberry\nfrom gqlauth.user.queries import UserQueries\nfrom gqlauth.core.middlewares import JwtSchema\n</code></pre> DefaultRelay <pre><code>from gqlauth.user import arg_mutations as mutations\n</code></pre> <pre><code>from gqlauth.user import relay as mutations\n</code></pre> <pre><code>@strawberry.type\nclass Query(UserQueries):\n    # you can add your queries here\n    ...\n</code></pre> you can choose what fields to include like this <pre><code>import strawberry\nfrom gqlauth.user.queries import UserQueries, UserType\nfrom django.contrib.auth import get_user_model\nfrom gqlauth.core.middlewares import JwtSchema\n\n@strawberry.django.type(model=get_user_model())\nclass MyQueries:\n    me: UserType = UserQueries.me\n    public: UserType = UserQueries.public_user\n    # etc...\n</code></pre> <pre><code>@strawberry.type\nclass Mutation:\n\n    # include what-ever mutations you want.\n    verify_token = mutations.VerifyToken.field\n    update_account = mutations.UpdateAccount.field\n    archive_account = mutations.ArchiveAccount.field\n    delete_account = mutations.DeleteAccount.field\n    password_change = mutations.PasswordChange.field\n    swap_emails = mutations.SwapEmails.field\n    captcha = Captcha.field\n    token_auth = mutations.ObtainJSONWebToken.field\n    register = mutations.Register.field\n    verify_account = mutations.VerifyAccount.field\n    resend_activation_email = mutations.ResendActivationEmail.field\n    send_password_reset_email = mutations.SendPasswordResetEmail.field\n    password_reset = mutations.PasswordReset.field\n    password_set = mutations.PasswordSet.field\n    refresh_token = mutations.RefreshToken.field\n    revoke_token = mutations.RevokeToken.field\n    verify_secondary_email = mutations.VerifySecondaryEmail.field\n\n# This is essentially the same as strawberries schema though it\n# injects the user to `info.context[\"request\"].user`\nschema = JwtSchema(query=Query, mutation=Mutation)\n</code></pre>"},{"location":"tutorial/#update-the-urls","title":"Update the urls","text":"<pre><code># quickstart/urls.py\nfrom strawberry.django.views import AsyncGraphQLView\nfrom users.schema import schema\n\nurlpatterns = [\n  path(\"admin/\", admin.site.urls),\n  path('graphql', AsyncGraphQLView.as_view(schema=schema)),\n]\n</code></pre>"},{"location":"tutorial/#load-fixtures","title":"Load fixtures","text":"<p>Before starting to query, let's load some users on the database. Create a new file called <code>users.json</code> in the same directory as <code>manage.py</code> with the following:</p> <p>Have a look on the fixtures, note that we are creating 4 users and 3 <code>UserStatus</code>. When creating a user, we create a relating <code>UserStatus</code> by default on <code>post_save</code> signal with the following fields:</p> <pre><code>verified=False\narchived=False\n</code></pre> <p>You can access it on any user:</p> <pre><code>user.status.[verified | archived]\n</code></pre> <pre><code>[\n  {\n      \"model\": \"users.CustomUser\",\n      \"pk\": 1,\n      \"fields\": {\n          \"password\": \"pbkdf2_sha256$180000$nFcBtiqGnWN9$hf58wNg77oT1BlNKRdATVVvBIa69+dz22fL1JKOKTaA=\",\n          \"last_login\": null,\n          \"is_superuser\": false,\n          \"username\": \"user1\",\n          \"first_name\": \"\",\n          \"last_name\": \"\",\n          \"email\": \"user1@email.com\",\n          \"is_staff\": false,\n          \"is_active\": true\n      }\n  },\n  {\n      \"model\": \"users.CustomUser\",\n      \"pk\": 2,\n      \"fields\": {\n          \"password\": \"pbkdf2_sha256$180000$nFcBtiqGnWN9$hf58wNg77oT1BlNKRdATVVvBIa69+dz22fL1JKOKTaA=\",\n          \"last_login\": null,\n          \"is_superuser\": false,\n          \"username\": \"user2\",\n          \"first_name\": \"\",\n          \"last_name\": \"\",\n          \"email\": \"user2@email.com\",\n          \"is_staff\": false,\n          \"is_active\": true\n      }\n  },\n  {\n      \"model\": \"gqlauth.userstatus\",\n      \"pk\": 2,\n      \"fields\": {\n          \"user\": 2,\n          \"verified\": true,\n          \"archived\": false\n      }\n  },\n  {\n      \"model\": \"users.CustomUser\",\n      \"pk\": 3,\n      \"fields\": {\n          \"password\": \"pbkdf2_sha256$180000$nFcBtiqGnWN9$hf58wNg77oT1BlNKRdATVVvBIa69+dz22fL1JKOKTaA=\",\n          \"last_login\": null,\n          \"is_superuser\": false,\n          \"username\": \"user3\",\n          \"first_name\": \"\",\n          \"last_name\": \"\",\n          \"email\": \"user3@email.com\",\n          \"is_staff\": false,\n          \"is_active\": true\n      }\n  },\n  {\n      \"model\": \"gqlauth.userstatus\",\n      \"pk\": 3,\n      \"fields\": {\n          \"user\": 3,\n          \"verified\": true,\n          \"archived\": true\n      }\n  },\n  {\n      \"model\": \"users.CustomUser\",\n      \"pk\": 4,\n      \"fields\": {\n          \"password\": \"pbkdf2_sha256$180000$nFcBtiqGnWN9$hf58wNg77oT1BlNKRdATVVvBIa69+dz22fL1JKOKTaA=\",\n          \"last_login\": null,\n          \"is_superuser\": false,\n          \"username\": \"user4\",\n          \"first_name\": \"\",\n          \"last_name\": \"\",\n          \"email\": \"user4@email.com\",\n          \"is_staff\": false,\n          \"is_active\": true\n      }\n  },\n  {\n      \"model\": \"gqlauth.userstatus\",\n      \"pk\": 4,\n      \"fields\": {\n          \"user\": 4,\n          \"verified\": true,\n          \"archived\": false\n      }\n  }\n]\n</code></pre> <p>run:</p> <pre><code>python -m  manage loaddata users.json\n</code></pre>"},{"location":"tutorial/#making-your-first-query","title":"Making your first query","text":"<p>Start the dev server:</p> <pre><code>python manage.py runserver\n</code></pre> <p>Open your browser:</p> <pre><code>http://127.0.0.1:8000/graphql\n</code></pre>"},{"location":"tutorial/#first-lets-log-in","title":"First let's log-in","text":""},{"location":"tutorial/#setup-email-backend","title":"Setup Email Backend","text":"<p>The default configuration is to send activation email when registering users, you can set it to <code>False</code> on your settings, but you still need an Email Backend to password reset.</p> <p>The quickest solution for development is to set up a Console Email Backend, simply add the following to your</p> <p><code>settings.py</code>.</p> <pre><code>EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n</code></pre> <p>Now all emails are sent to the standard output, instead of an actual email, and we are ready to continue this guide.</p>"},{"location":"tutorial/#lets-try-to-register-a-new-user","title":"Let's try to register a new user:","text":"<p>Too weak password</p> gqlrelayresponse <pre><code>mutation {\n  register(\n    email: \"new_user@email.com\",\n    username: \"new_user\",\n    password1: \"123456\",\n    password2: \"123456\",\n  ) {\n    success,\n    errors,\n  }\n}\n</code></pre> <pre><code>mutation {\n  register(\n    input: {\n      email: \"new_user@email.com\",\n      username: \"new_user\",\n      password1: \"123456\",\n      password2: \"123456\",\n    }\n  ) {\n    success,\n    errors,\n    token,\n    refreshToken\n  }\n}\n</code></pre> <pre><code>    {\n      \"data\": {\n        \"register\": {\n          \"success\": false,\n          \"errors\": {\n            \"password2\": [\n              {\n                \"message\": \"This password is too short. It must contain at least 8 characters.\",\n                \"code\": \"password_too_short\"\n              },\n              {\n                \"message\": \"This password is too common.\",\n                \"code\": \"password_too_common\"\n              },\n              {\n                \"message\": \"This password is entirely numeric.\",\n                \"code\": \"password_entirely_numeric\"\n              }\n            ]\n          }\n        }\n      }\n    }\n</code></pre> <p>Something went wrong! Now you know the response format that you can expect of all mutations.</p> <p>Let's try again:</p> <p>successful registration</p> arg_mutationrelayresponse <pre><code>mutation {\n  register(\n    email: \"new_user@email.com\",\n    username: \"new_user\",\n    password1: \"SuperSecureP@sw0rd\",\n    password2: \"SuperSecureP@sw0rd\",\n  ) {\n    success,\n    errors,\n    success\n  }\n}\n</code></pre> <pre><code>mutation {\n  register(\n    input: {\n      email: \"new_user@email.com\",\n      username: \"new_user\",\n      password1: \"SuperSecureP@sw0rd\",\n      password2: \"SuperSecureP@sw0rd\",\n    }\n  ) {\n    success,\n    errors,\n    token,\n    refreshToken\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"register\": {\n      \"success\": true,\n      \"errors\": null\n    }\n  }\n}\n</code></pre> <p>There is actually a new user, it is possible to log in (you can change it on the settings), but it is not verified yet.</p> <p>Save the <code>id</code> of the new user, so we can query it later.</p> <p>Go to your console and note the email that has been sent. Should be two outputs, html and plain text formats.</p> <p>Save the token from the url, something like this:</p> <pre><code>eyJ1c2VybmFtZSI6Im5ld191c2VyIiwiYWN0aW9uIjoiYWN0aXZhdGlvbiJ9:1isoSr:CDwK_fjBSxWj3adC-X16wqzv-Mw\n</code></pre>"},{"location":"tutorial/#verify-the-new-user","title":"Verify the new user","text":"<p>search your schema for <code>verify_account</code>: should look like this: </p> <p>Now let's try to verify the account:</p> <p>Gql</p> arg_mutationrelayresult <pre><code>mutation {\n  verifyAccount(token: \"YOUR TOKEN HERE\") {\n    success,\n    errors\n  }\n}\n</code></pre> <pre><code>    mutation {\n      verifyAccount(\n        input: {\n          token: \"&lt;YOUR TOKEN HERE&gt;\"\n        }\n      )\n      {\n        success,\n        errors\n      }\n    }\n</code></pre> <pre><code>{\n  \"data\": {\n    \"verifyAccount\": {\n      \"success\": true,\n      \"errors\": null\n    }\n  }\n}\n</code></pre>"},{"location":"tutorial/#login","title":"Login","text":"<p>search your schema for <code>tokenAuth</code>: should look like this: </p> <p>Gql</p> arg_mutationrelayresponse <pre><code>mutation {\n  tokenAuth(username: \"new_user\", password: \"SuperSecureP@sw0rd\") {\n    success\n    errors\n    token {\n      payload {\n        origIat\n        exp\n      }\n      token\n    }\n    user {\n      isActive\n      username\n      email\n      status {\n        verified\n      }\n    }\n  }\n}\n</code></pre> <pre><code>mutation {\n  tokenAuth(input: {username: \"new_user\", password: \"SuperSecureP@sw0rd\"}) {\n    success\n    errors\n    token {\n      payload {\n        origIat\n        exp\n      }\n      token\n    }\n    user {\n      isActive\n      username\n      email\n      status {\n        verified\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"data\": {\n    \"tokenAuth\": {\n      \"success\": true,\n      \"errors\": null,\n      \"token\": {\n        \"payload\": {\n          \"origIat\": \"2022-09-18T14:56:33.829961\",\n          \"exp\": \"2022-09-18T15:01:33.829961\"\n        },\n        \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjoie1xuIFwiZXhwXCI6IFwiMjAyMi0wOS0xOFQxNTowMTozMy44Mjk5NjFcIixcbiBcIm9yaWdJYXRcIjogXCIyMDIyLTA5LTE4VDE0OjU2OjMzLjgyOTk2MVwiLFxuIFwidXNlcm5hbWVcIjogXCJuZXdfdXNlclwiXG59In0.2qSD_203UCa4EmtiDz-YtbO59ETaLfLGj7R_6c2197Y\"\n      },\n      \"user\": {\n        \"isActive\": true,\n        \"username\": \"new_user\",\n        \"email\": \"new_user@email.com\",\n        \"status\": {\n          \"verified\": true\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Save this <code>token</code>, we are going to use it in the request headers.</p>"},{"location":"tutorial/#mequery","title":"MeQuery","text":"<p>With <code>MeQuery</code> you can retrieve data for the currently authenticated user:</p> <p>No headers supplied, will raise graphql error</p> queryresponse <pre><code>    query{\n      me{\n        username\n        verified\n      }\n    }\n</code></pre> <pre><code>{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"User is not authenticated.\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\n        \"me\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>With the token from last mutation, we can access the data. </p> <p>Add The token in the Headers section in GraphiQL </p> queryresponse <pre><code>    query{\n      me{\n        username\n        verified\n      }\n    }\n</code></pre> <pre><code>{\n  \"data\": {\n    \"me\": {\n      \"verified\": true,\n      \"username\": \"testadmin\"\n    }\n  }\n}\n</code></pre> <p>If it fails because of the token (in case you took some time, and it has expired), make the login again and get a new token.</p>"},{"location":"tutorial/#next-steps","title":"Next steps","text":"<ul> <li>explore all the mutations.</li> <li>Support Django-Channels.</li> <li>Navigate through the GraphiQL Documentation Explorer.</li> <li>Change the settings.</li> <li>Explore the api.</li> <li>make sure you are familiar with our captcha system.</li> <li>Override email templates.</li> </ul>"}]}